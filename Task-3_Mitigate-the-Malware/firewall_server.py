# www.theforage.com - Telstra Cyber Task 3
# Firewall Server Handler

from http.server import BaseHTTPRequestHandler, HTTPServer
import logging

# Host and port for the server
host = "localhost"
port = 8000

# Loggging configuration
logging.basicConfig(filename="firewall.log", level=logging.INFO, format="%(asctime)s - %(message)s")

def block_request(self):
    """Blocks the request and logs the details."""
    client_ip = self.client_address[0]
    logging.info(f"Blocked malicious request from {client_ip} - Path: {self.path} - Headers: {dict(self.headers)}")
    self.send_error(403, "Request blocked due to firewall")

def handle_request(self):
    """Handles incoming requests and filters out malicious ones."""
    
    # List of bad headers from the proof-of-concept payload
    bad_headers = {
        "suffix": "%>//",
        "c1": "Runtime",
        "c2": "<%",
        "DNT": "1",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    # If the request targets the Spring Framework exploit path
    if self.path == "/tomcatwar.jsp":
        for header, value in bad_headers.items():
            if header in self.headers and self.headers[header] == value:
                return block_request(self)

    # Log and allow safe requests
    client_ip = self.client_address[0]
    logging.info(f"Allowed request from {client_ip} - Path: {self.path}")
    
    self.send_response(200)
    self.send_header("Content-Type", "application/json")
    self.end_headers()
    self.wfile.write(b'{"success": true}')

class ServerHandler(BaseHTTPRequestHandler):
    """Handles HTTP requests (GET and POST)."""

    def do_GET(self):
        handle_request(self)

    def do_POST(self):
        handle_request(self)

if __name__ == "__main__":
    server = HTTPServer((host, port), ServerHandler)
    print("[+] Firewall Server")
    print(f"[+] HTTP Web Server running on: {host}:{port}")

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass

    server.server_close()
    print("[+] Server terminated. Exiting...")
    exit(0)
